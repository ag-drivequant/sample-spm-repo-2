// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DriveKitDriverAchievementModule
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import DriveKitCoreModule
import DriveKitDBAchievementAccessModule
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum RankingSyncStatus : Swift.Int {
  case noError, cacheDataOnly, failedToSyncRanking, syncAlreadyInProgress, userNotRanked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BadgeSyncStatus : Swift.Int {
  case noError, cacheDataOnly, failedToSyncBadgeCacheOnly, syncAlreadyInProgress
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StreakSyncStatus : Swift.Int {
  case noError, cacheDataOnly, failedToSyncStreakCacheOnly, syncAlreadyInProgress
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class DKBadgeStatistics : ObjectiveC.NSObject {
  final public let acquired: Swift.Int
  final public let acquiredBronze: Swift.Int
  final public let acquiredSilver: Swift.Int
  final public let acquiredGold: Swift.Int
  final public let remaining: Swift.Int
  final public let remainingBronze: Swift.Int
  final public let remainingSilver: Swift.Int
  final public let remainingGold: Swift.Int
  final public let total: Swift.Int
  final public let totalBronze: Swift.Int
  final public let totalSilver: Swift.Int
  final public let totalGold: Swift.Int
  public init(acquired: Swift.Int, acquiredBronze: Swift.Int, acquiredSilver: Swift.Int, acquiredGold: Swift.Int, remaining: Swift.Int, remainingBronze: Swift.Int, remainingSilver: Swift.Int, remainingGold: Swift.Int, total: Swift.Int, totalBronze: Swift.Int, totalSilver: Swift.Int, totalGold: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DriveKitDriverAchievement : ObjectiveC.NSObject {
  @objc public static let sdkVersion: Swift.String
  @objc public static let shared: DriveKitDriverAchievementModule.DriveKitDriverAchievement
  @objc public func initialize()
  @objc public func getStreaks(type: DriveKitCoreModule.SynchronizationType = .defaultSync, completionHandler: @escaping (DriveKitDriverAchievementModule.StreakSyncStatus, [DriveKitDBAchievementAccessModule.DKStreak]) -> Swift.Void)
  @objc public func getBadges(type: DriveKitCoreModule.SynchronizationType = .defaultSync, completionHandler: @escaping (DriveKitDriverAchievementModule.BadgeSyncStatus, [DriveKitDBAchievementAccessModule.DKBadge], Swift.Int) -> Swift.Void)
  @objc public func getBadgeStatistics() -> DriveKitDriverAchievementModule.DKBadgeStatistics
  @objc public func getRanking(rankingType: DriveKitDBAchievementAccessModule.DKRankingType, rankingPeriod: DriveKitDBAchievementAccessModule.DKRankingPeriod = .weekly, rankingDepth: Swift.Int = 5, groupName: Swift.String? = nil, type: DriveKitCoreModule.SynchronizationType = .defaultSync, completionHandler: @escaping (DriveKitDriverAchievementModule.RankingSyncStatus, DriveKitDBAchievementAccessModule.DKRanking?) -> Swift.Void)
  @available(*, deprecated, message: "You no longer need to call the reset method of any module except the one in DriveKit")
  @objc public func reset()
  @objc deinit
}
extension DriveKitDriverAchievementModule.RankingSyncStatus : Swift.Equatable {}
extension DriveKitDriverAchievementModule.RankingSyncStatus : Swift.Hashable {}
extension DriveKitDriverAchievementModule.RankingSyncStatus : Swift.RawRepresentable {}
extension DriveKitDriverAchievementModule.BadgeSyncStatus : Swift.Equatable {}
extension DriveKitDriverAchievementModule.BadgeSyncStatus : Swift.Hashable {}
extension DriveKitDriverAchievementModule.BadgeSyncStatus : Swift.RawRepresentable {}
extension DriveKitDriverAchievementModule.StreakSyncStatus : Swift.Equatable {}
extension DriveKitDriverAchievementModule.StreakSyncStatus : Swift.Hashable {}
extension DriveKitDriverAchievementModule.StreakSyncStatus : Swift.RawRepresentable {}
